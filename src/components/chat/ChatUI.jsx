"use client";
import { useState, useRef, useEffect } from 'react';
import styles from '@/styles/components/ChatUI.module.scss';
import { SEND } from '../icons';
import { Icon } from '@iconify/react';

export default function ChatUI({chatID}) {
  const [messages, setMessages] = useState([
    { role: 'system', content: `Tu es un assistant intelligent spÃ©cialisÃ© en investissement locatif meublÃ© (LMNP).
Ton rÃ´le est de renseigner les visiteurs du site lmnp-conseils.immo de maniÃ¨re claire, pÃ©dagogique et engageante.
Tu rÃ©ponds aux questions frÃ©quentes sur :
Le fonctionnement du LMNP
Les avantages fiscaux (amortissement, non-imposition des loyers, etc.)
Les investissements accessibles dÃ¨s 120 â‚¬/mois
Le financement, la gestion locative, les rÃ©gimes fiscaux (rÃ©el, micro-BIC)
Le profil type des investisseurs (salariÃ©, retraitÃ©, jeunes actifs, etc.)
Et tu peux Ã©galement proposer des simulations gratuites pour estimer les mensualitÃ©s, la rentabilitÃ© ou les Ã©conomies dâ€™impÃ´ts.
Ton ton est professionnel, clair et rassurant. Tu simplifies les concepts et restes accessible, mÃªme pour les dÃ©butants.
ğŸ§  Important :
Si tu constates que tu ne disposes pas de toutes les informations nÃ©cessaires pour rÃ©pondre de maniÃ¨re prÃ©cise (ex : prix dâ€™un bien, localisation, situation personnelle du prospect, stratÃ©gie fiscaleâ€¦), oriente le visiteur vers un conseiller humain seulement si câ€™est pertinent dans le contexte.
Voici le message que tu peux proposer avec naturel et bienveillance :
"Pour vous apporter une rÃ©ponse plus prÃ©cise, il me faudrait des informations complÃ©mentaires que seul un conseiller peut prendre en compte (prix dâ€™un bien, zone gÃ©ographique, stratÃ©gie fiscale adaptÃ©eâ€¦). Je peux vous proposer un rappel gratuit par un expert LMNP, au moment de votre choix, avec une simulation personnalisÃ©e Ã  la clÃ©. Souhaitez-vous rÃ©server un crÃ©neau ?
Câ€™est gratuit, rapide et sans engagement."` },
  ]);

  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);
  const [allowSending, setAllowSending] = useState(false);
  const chat = useRef(null);

  

  console.log(chatID)

  const scrollToBottom = () => {
    if (chat.current)
      chat.current.scrollTop = chat.current?.scrollHeight;
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    if (!loading && input.trim())
    setAllowSending(true);
  else
    setAllowSending(false);
  }, [loading, input])

  const handleSend = async () => {
    if (!allowSending) return;

    const newMessages = [...messages, { role: 'user', content: input }];
    setMessages(newMessages);
    setInput('');
    setLoading(true);
    setAllowSending(false);

    try {
      const res = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ chat_id: chatID, messages: newMessages }),
      });

      const data = await res.json();

      if (data.message) {
        setMessages(msgs => [...msgs, { role: 'assistant', content: data.message }]);
      } else {
        setMessages(msgs => [...msgs, { role: 'assistant', content: 'Error: No response received.' }]);
      }
    } catch (err) {
      console.error('Client error:', err);
      setMessages(msgs => [...msgs, { role: 'assistant', content: 'Error: Failed to fetch response.' }]);
    } finally {
      setLoading(false);
      setAllowSending(true)
    }
  };

  return (
    <div className={styles.chatContainer}>
      <h1>Chattez avec notre assistant IA</h1>
      <div className={styles.chatBox} ref={chat}>
        <p className={`${styles.message} ${styles.assistant}`}>
          Bonjour, je suis l'assistant intelligent de LMNP Conseils. Je suis lÃ  pour rÃ©pondre Ã  vos questions courantes sur le statut de Loueur meublÃ© non professionnel. Quelle estÂ votreÂ demandeÂ ?
        </p>
        {messages
          .filter(msg => msg.role !== 'system')
          .map((msg, i) => (
            <div
              key={i}
              className={`${styles.message} ${msg.role === 'user' ? styles.user : styles.assistant}`}
            >
              {msg.content}
            </div>
          ))}
        {loading && <div className={`${styles.loading}`}>
            <div className={`${styles.typing}`}>
                <div className={`${styles.dot}`}></div>
                <div className={`${styles.dot}`}></div>
                <div className={`${styles.dot}`}></div>
            </div>
        </div>}
      </div>

      <div className={styles.inputContainer}>
        <input
          type="text"
          name="message"
          value={input}
          onChange={e => setInput(e.target.value)}
          placeholder="Ecrivez votre message..."
          onKeyDown={e => e.key === 'Enter' && handleSend()}
          className={`${styles.input}`}
        />
        {/* <button onClick={handleSend} disabled={loading} className={`${styles.button}`}>
          Send
        </button> */}
        <Icon icon={SEND} onClick={handleSend} className={`${styles.button} ${!allowSending && styles.disabled}`} />
      </div>
    </div>
  );
}
